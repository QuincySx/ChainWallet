import com.smallraw.chain.plugin.BuildConfig
import com.smallraw.chain.plugin.Deps

plugins {
    id("com.android.application")
    id("kotlin-android")
    id("kotlin-parcelize")
    id("kotlin-kapt")
    id("com.google.devtools.ksp") version "$ksp_version"
    id('dagger.hilt.android.plugin')
}

android {
    namespace 'com.smallraw.chain.wallet'
    compileSdk BuildConfig.compileSdkVersion
    buildToolsVersion BuildConfig.buildToolsVersion

    //新版 ndk 写法 ndkVersion "major.minor.build"
    ndkVersion "22.1.7171670"

    defaultConfig {
        applicationId "com.smallraw.chain.wallet"
        minSdk BuildConfig.minSdkVersion
        targetSdk BuildConfig.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        vectorDrawables {
            useSupportLibrary true
        }

        // abi related please see https://developer.android.com/ndk/guides/abis
        ndk {
            abiFilters 'arm64-v8a'
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation"  : "$projectDir/schemas".toString(),
                        "room.incremental"     : "true",
                        "room.expandProjection": "true"]
            }
        }
    }

    buildFeatures {
        viewBinding true
        dataBinding true
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion '1.1.1'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            version '3.18.1'
        }
    }

    sourceSets {
        main {
            res.srcDirs = [
                    listSubFile('src/main/res/layouts'),
            ]
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = 11
    }
    packagingOptions {
        resources {
            excludes += ['/META-INF/AL2.0', '/META-INF/LGPL2.1']
        }
    }
}

//ksp {
//    arg("moshi.generated", "javax.annotation.Generated")
//}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.6.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation "com.jakewharton.timber:timber:5.0.1"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.1'


    // Lifecycle
    def lifecycle_version = "2.4.1"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    // Saved state module for ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"
    // optional - helpers for implementing LifecycleOwner in a Service
    implementation "androidx.lifecycle:lifecycle-service:$lifecycle_version"
    // optional - ProcessLifecycleOwner provides a lifecycle for the whole application process
    implementation "androidx.lifecycle:lifecycle-process:$lifecycle_version"
    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    // Lifecycles only (without ViewModel or LiveData)
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"


    // Apple Silicon Room Database 使用临时解决方案，2.4.0 修复 M1 不能运行的问题。
    // see https://issuetracker.google.com/issues/174695268
    def roomVersion = "2.4.2"
    implementation("androidx.room:room-runtime:$roomVersion")
    ksp("androidx.room:room-compiler:$roomVersion")
    implementation("androidx.room:room-ktx:$roomVersion")


    // ktx android
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation "androidx.activity:activity-ktx:1.4.0"
    implementation 'androidx.fragment:fragment-ktx:1.4.1'
    implementation "androidx.collection:collection-ktx:1.2.0"


    // see https://developer.android.com/jetpack/compose/setup
    implementation 'androidx.activity:activity-compose:1.4.0'
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation 'androidx.compose.material3:material3:1.0.0-alpha12'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_version"


    implementation("androidx.recyclerview:recyclerview:1.2.1")
    // see https://github.com/CymChad/BaseRecyclerViewAdapterHelper
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:3.0.4'

    implementation project(":lib-chain-bitcoin")
    implementation project(":lib-authority-ckeck")

    testImplementation Deps.test_junit
    androidTestImplementation Deps.test_android_junit
    androidTestImplementation Deps.test_espresso

    implementation project(":lib-flag-feature")
    debugImplementation project(":app-flag-feature-kit")

    // see https://github.com/square/leakcanary/
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.9.1'

    // see https://github.com/cashapp/contour
    implementation "app.cash.contour:contour:1.1.0"
    // see https://github.com/coil-kt/coil
    implementation 'io.coil-kt:coil:2.1.0'

    // see https://github.com/square/moshi
    implementation 'com.squareup.moshi:moshi:1.13.0'
    // kapt("com.squareup.moshi:moshi-kotlin-codegen:1.12.0")
    // see https://github.com/ZacSweers/MoshiX/tree/main/moshi-ksp
    ksp "dev.zacsweers.moshix:moshi-ksp:0.14.1"

    // see https://github.com/PureWriter/FullDraggableDrawer
    implementation 'com.drakeet.drawer:drawer:1.0.3'
    // Optional: No need if you just use the FullDraggableHelper
    implementation 'androidx.drawerlayout:drawerlayout:1.1.1'

    // see https://github.com/discord/OverlappingPanels
    implementation 'com.github.discord:OverlappingPanels:0.1.2'

    // Hilt
    implementation "com.google.dagger:hilt-android:$hiltVersion"
    kapt "com.google.dagger:hilt-android-compiler:$hiltVersion"

    // Hilt testing
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hiltVersion"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hiltVersion"
}

// 获取所有子文件夹(不包含当前文件夹)
def listSubFile(resFolder) {
    def files = file(resFolder).listFiles()
    def folders = []
    files.each {
        item ->
            if (item.isDirectory()) {
                folders.add(item.path)
            }
    }
    folders.add(file(resFolder).parentFile.absolutePath)
    return folders
}